name: Example Build Image

on:
  push:
    branches:
      - "prod"

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: 213940328604.dkr.ecr.us-east-1.amazonaws.com/lks-voting-image
  ENV: "prod"

permissions:
  id-token: write
  contents: read

jobs:
  build:
    name: Build Image Production
    runs-on: ubuntu-latest
    environment: Production
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr-build
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image vote
      id: build-image-vote
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        echo "Building Docker image..."
        docker build -t 213940328604.dkr.ecr.us-east-1.amazonaws.com/lks-voting-image:vote ./vote/**
        echo "Pushing Docker image to ECR..."
        docker push 213940328604.dkr.ecr.us-east-1.amazonaws.com/lks-voting-image:vote

    - name: Build, tag, and push image worker
      id: build-image-worker
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        echo "Building Docker image..."
        docker build -t 213940328604.dkr.ecr.us-east-1.amazonaws.com/lks-voting-image:worker ./worker/**
        echo "Pushing Docker image to ECR..."
        docker push 213940328604.dkr.ecr.us-east-1.amazonaws.com/lks-voting-image:worker

    - name: Build, tag, and push image result
      id: build-image-result
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        echo "Building Docker image..."
        docker build -t 213940328604.dkr.ecr.us-east-1.amazonaws.com/lks-voting-image:result ./result/**
        echo "Pushing Docker image to ECR..."
        docker push 213940328604.dkr.ecr.us-east-1.amazonaws.com/lks-voting-image:result

    - name: End Build
      run: echo "Build Success"

  master:
    name: Example Pull Image on master
    runs-on: master
    needs: build
    steps:
      - name: Update runner's docker Version, as worker module requires it
        run: |
          docker --version

      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr-pullmaster
        uses: aws-actions/amazon-ecr-login@v1
  
      - name: Pull image
        id: pull-image-master
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: 213940328604.dkr.ecr.us-east-1.amazonaws.com/lks-voting-image
        run: |
          docker pull 213940328604.dkr.ecr.us-east-1.amazonaws.com/lks-voting-image:worker
          docker pull 213940328604.dkr.ecr.us-east-1.amazonaws.com/lks-voting-image:vote
          docker pull 213940328604.dkr.ecr.us-east-1.amazonaws.com/lks-voting-image:result

  node1:
    name: Example Pull Image on node1
    runs-on: node1
    needs: build
    steps:
      - name: Update runner's docker Version, as worker module requires it
        run: |
          docker --version

      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr-pullnode1
        uses: aws-actions/amazon-ecr-login@v1

      - name: Pull image
        id: pull-image-node1
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: 213940328604.dkr.ecr.us-east-1.amazonaws.com/lks-voting-image
        run: |
          docker pull 213940328604.dkr.ecr.us-east-1.amazonaws.com/lks-voting-image:worker
          docker pull 213940328604.dkr.ecr.us-east-1.amazonaws.com/lks-voting-image:vote
          docker pull 213940328604.dkr.ecr.us-east-1.amazonaws.com/lks-voting-image:result

  node2:
    name: Example Pull Image on node2
    runs-on: node2
    needs: build
    steps:
      - name: Update runner's docker Version, as worker module requires it
        run: |
          docker --version

      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr-pullnode2
        uses: aws-actions/amazon-ecr-login@v1

      - name: Pull image
        id: pull-image-node2
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: 213940328604.dkr.ecr.us-east-1.amazonaws.com/lks-voting-image
        run: |
          docker pull 213940328604.dkr.ecr.us-east-1.amazonaws.com/lks-voting-image:worker
          docker pull 213940328604.dkr.ecr.us-east-1.amazonaws.com/lks-voting-image:vote
          docker pull 213940328604.dkr.ecr.us-east-1.amazonaws.com/lks-voting-image:result

  deploy:  
    name: Example Deploy Application into Docker Swarm
    runs-on: master
    needs:
      - master
      - node1
      - node2
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Deploy application images to Docker Swarm
        run: |
          docker node ls
          docker service ls
          docker stack ls
          docker stack rm stackdemo
          sleep 30
          docker stack deploy --compose-file docker-stack.yml stackdemo
